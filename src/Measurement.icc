#ifdef MEASUREMENT_H

#ifndef MEASUREMENT_ICC
#define MEASUREMENT_ICC

namespace MEAS {
  template <typename T>
  Measurement<T>::Measurement() {
    m_observable=0;
  }

  template <typename T>
  Measurement<T>::Measurement(const char *name, const char *desc) {
    m_observable=0; m_name = name; m_description = desc;
  }

  template <typename T>
  Measurement<T>::Measurement(const Measurement<T> & m) {
    copy(m);
  }

  template <typename T>
  Measurement<T>::~Measurement() {
    if (m_observable) delete m_observable;
    deleteNuisance();
  }
  //
  template <typename T>
  Measurement<T> const & Measurement<T>::operator=( Measurement<T> const & m ) {
    copy(m);
    return *this;
  }
  template <typename T>
  inline bool Measurement<T>::operator==( const Measurement<T> & m ) {
    bool rval = false;
    return rval;
  }

  template <typename T>
  void Measurement<T>::setTrueSignal(double s) {
    m_trueSignal = s;
  }

  template <typename T>
  void Measurement<T>::setObservable(const OBS::BaseType<T> * obs) {
    if (m_observable) delete m_observable;
    m_observable = (obs ? obs->clone():0);
  }

  template <typename T>
  void Measurement<T>::setObsVal(T val) {
    if (m_observable) m_observable->setObservedValue(val);
  }

  template <typename T>
  void Measurement<T>::setName(const char *name) {
    m_name = name;
  }

  template <typename T>
  void Measurement<T>::setDescription(const char *descr) {
    m_description = descr;
  }

  template <typename T>
  OBS::Base *Measurement<T>::addNuisance(OBS::Base * nuPar) {
    if (nuPar) m_nuisancePars.push_back( nuPar );
    return nuPar;
  }

  template <typename T>
  void Measurement<T>::deleteNuisance() {
    for (std::list< OBS::Base * >::iterator it = m_nuisancePars.begin();
         it != m_nuisancePars.end();
         ++it) {
      if (*it) delete *it;
    }
    m_nuisancePars.clear();
  }

  template <typename T>
  bool Measurement<T>::removeNuisance(const OBS::Base *nptr) {
    bool rval=false;
    for (std::list< OBS::Base * >::iterator it = m_nuisancePars.begin();
         it != m_nuisancePars.end();
         ++it) {
      if (*it==nptr) {
        it = m_nuisancePars.erase(it);
        rval = true;
      }
    }
    return rval;
  }

  template <typename T>
  void Measurement<T>::copyNuisance(std::list< OBS::Base * > & newList ) const {
    newList.clear();
    if (m_nuisancePars.size()>0) {
      for (std::list< OBS::Base * >::const_iterator it = m_nuisancePars.begin();
           it !=  m_nuisancePars.end();
           ++it) {
        newList.push_back(OBS::clone(*it));
      }
    }
  }

  // --------- REMOVE THE FOLLOWING RELATED TO INTEGRALS!
  // initialize integrals of all nuisance parameters
  // template <typename T>
  // void Measurement<T>::initIntNuisance() {
  //   for (std::list< OBS::Base * >::iterator it = m_nuisancePars.begin();
  //        it !=  m_nuisancePars.end();
  //        ++it) {
  //     (*it)->initIntegral();
  //   }
  // }
  // Assumes that all parameters have called OBS::initInt()
  // template <typename T>
  // void Measurement<T>::fillIntNuisance() {
  //   for (std::list< OBS::Base * >::iterator it = m_nuisancePars.begin();
  //        it !=  m_nuisancePars.end();
  //        ++it) {
  //     (*it)->fillInt();
  //   }
  // }
  // //! Initialize nuisance weights: f(x)g(y)...dxdy
  // template <typename T>
  // void Measurement<T>::initNuisanceWeights() {
  //   std::vector<int> jj;
  //   std::vector<double> dx;
  //   double step;
  //   int n, nnpar;
  //   m_nuisanceIndecis.clear();
  //   m_nuisanceIndMax.clear();
  //   //
  //   nnpar=0;
  //   for (std::list< OBS::Base * >::iterator it = m_nuisancePars.begin();
  //        it !=  m_nuisancePars.end();
  //        ++it) {
  //     nnpar++;
  //     if ((*it)->isIntFilled()) {
  //       n = (*it)->getIntN();
  //       if (n<1) {
  //         std::cout << "WARNING: Integral with ZERO points for nuisance parameter -> " << (*it)->getName() << std::endl;
  //         n=1; //HERE: SHOULD fill integral for fixed value...
  //       }
  //     } else {
  //       // Could in principle call fillInt() here - but let's not...
  //       std::cout << "WARNING: Integral not filled for nuisance parameter -> " << (*it)->getName() << std::endl;
  //       n=1; //HERE: SHOULD fill integral for fixed value...
  //     }
  //     m_nuisanceIndMax.push_back(n-1);
  //     step = (n==1 ? 1.0:(*it)->getIntdX()); // get dx (==1 if only one point)
  //     dx.push_back((*it)->getIntdX());
  //     jj.push_back(0);
  //   }
  //   //    std::cout << "--> initNuisanceWeights(); nnpar = " << nnpar << std::endl;
  //   //
  //   // Loop over all volume elements (dxdydz...)
  //   // and calculate the weight per volume element: f(x)g(y)h(z)...dxdydz
  //   //
  //   //    std::cout << "--> initNuisanceWeights(): loop over all volume elements" << std::endl;
  //   m_nuisanceWeights.clear();
  //   double w;
  //   m_nuisanceIntNorm = 0;
  //   //
  //   m_nuisanceIndecis.push_back(jj); // save null vector
  //   while (Combination::next_vector(jj,m_nuisanceIndMax)) {
  //     m_nuisanceIndecis.push_back(jj); // save vector
  //   }
  //   //
  //   std::list< OBS::Base * >::iterator itnp = m_nuisancePars.begin();
  //   //
  //   //    std::cout << "--> initNuisanceWeights(); nind = " << m_nuisanceIndecis.size() << std::endl;
  //   double wt;
  //   for ( unsigned int i=0; i<m_nuisanceIndecis.size(); i++) {
  //     w = 1.0;
  //     itnp = m_nuisancePars.begin();
  //     //! Calculate w(i,j,...) = f(xi)*dx * g(yj)*dy * ...
  //     for (int j=0; j<nnpar; j++) {
  //       wt = (*itnp)->getIntWeight(m_nuisanceIndecis[i][j]);
  //       w *= wt;
  //       // TODO: DEBUG
  //       if (i<0) std::cout << "NIND0: par = " << j
  //                          << "  weight = " << wt
  //                          << ", index = " << m_nuisanceIndecis[i][j]
  //                          << ", x = " << (*itnp)->getIntX(m_nuisanceIndecis[i][j])
  //                          << std::endl;
  //       ++itnp;
  //     }
  //     // TODO: Debug info
  //     if (i<0) std::cout << "NIND: " << std::setw(6) << i << ". weight = " << w << std::endl;
  //     m_nuisanceWeights.push_back(w);
  //     m_nuisanceIntNorm += w;
  //   }
  //   //    std::cout << "--> initNuisanceWeights(); norm = " << m_nuisanceIntNorm << std::endl;
  // }
  //
  template <typename T>
  void Measurement<T>::dump() const {
    std::cout << "-----------MEASUREMENT------------------------\n";
    if (m_observable) m_observable->dump();
    for (std::list< OBS::Base * >::const_iterator it = m_nuisancePars.begin();
         it !=  m_nuisancePars.end();
         ++it) {
      (*it)->dump();
    }
    std::cout << "----------------------------------------------\n";
  }
  //
  template <typename T> const double Measurement<T>::getM(double s)    const      { return 0;}
  template <typename T> const double Measurement<T>::getPdfM(double s) const      { return 0;}
  template <typename T> const double Measurement<T>::getSignal()       const      { return 0;}
  template <typename T> const double Measurement<T>::getSignalUnc()    const      { return 0;}
  //
  template <typename T> const double Measurement<T>::getTrueSignal()   const      { return m_trueSignal; }
  template <typename T> const T      Measurement<T>::getObsVal() const            { T val=0; if (m_observable) m_observable->getObservedValue(val); return val;}
  template <typename T> const double Measurement<T>::getObsPdfMean() const        { return (m_observable ? m_observable->getPdfUseMean():0); }
  template <typename T> const double Measurement<T>::getObsPdfSigma() const       { return (m_observable ? m_observable->getPdfUseSigma():0); }
  template <typename T> const PDF::DISTYPE Measurement<T>::getObsPdfDist() const  { return (m_observable ? m_observable->getPdfDist():0); }
  template <typename T> const OBS::BaseType<T> *Measurement<T>::getObservable() const   { return m_observable; }
  //
  template <typename T> const std::string & Measurement<T>::getName()                      const { return m_name;}
  template <typename T> const std::string & Measurement<T>::getDescription()               const { return m_description;}
  template <typename T> const std::list< OBS::Base * > & Measurement<T>::getNuisanceList() const { return m_nuisancePars; }

  template <typename T> const double Measurement<T>::rndObs() { OBS::BaseType<T> *p = static_cast< OBS::BaseType<T> * >(m_observable); return (*p)(); }

  // generate a random pseudoexperiment and store this in the observed parts of the observables
  template <typename T>
  void Measurement<T>::generatePseudoExperiment() {
    //
    // First set observed nuisance to random values
    //
    for (std::list< OBS::Base * >::iterator it = m_nuisancePars.begin();
         it !=  m_nuisancePars.end();
         ++it) {
      //      obs = static_cast< OBS::Base * >(*it);
      (*it)->setObservedRnd(); // set to a random value according to pdf
    }
    //
    // get the average to be used - should always be the same
    // since N(obs) is a poisson from the true e*s+b.
    // the below call uses the pdf 'true' mean of e and b
    //
    double mean = this->getPdfM(m_trueSignal);

    m_observable->setPdfUseMean(mean);
    //
    // ...and then the observable
    //
    OBS::BaseType<T> *obs = static_cast< OBS::BaseType<T> * >(m_observable);
    obs->setObservedRnd();
    //
  }
  //

  template <typename T>
  void Measurement<T>::copy(const Measurement<T> & other) {
    if (this != &other) {
      m_name        = other.getName();
      m_description = other.getDescription();
      m_trueSignal  = other.getTrueSignal();
      if (m_observable) delete m_observable;
      m_observable  = (other.getObservable())->clone(); // make a clone - note PDF object is NOT cloned... pointer retained (speed/mem issues)
      other.copyNuisance(m_nuisancePars);// idem
    }
  }

  template <typename T>
  OBS::Base *Measurement<T>::makeNuisance(PDF::DISTYPE dist) {
    OBS::Base *np = OBS::makeObservable(dist);
    if (np==0) {
      std::cerr << "ERROR: Failed creating a nuisance parameter!" << std::endl;
    } else {
      addNuisance(np);
    }
    return np;
  }

  template <typename T>
  const int Measurement<T>::getNuisanceIndex(const OBS::Base *nptr) {
    if (nptr==0) return -1;
    int rval=-1;
    bool found = false;
    std::list< OBS::Base * >::iterator it = m_nuisancePars.begin();
    while (!found && (it != m_nuisancePars.end())) {
      found = (*it==nptr);
      rval++;
      ++it;
    }
    return rval;
  }

  ///////////////////////////////////////////////////////////
  MeasPois::MeasPois() : Measurement<int>() {
    initObservable();
  }
  MeasPois::MeasPois(const char *name, const char *desc) : Measurement<int>(name,desc) {
    initObservable();
  }
  MeasPois::MeasPois(OBS::ObservablePois * obs) : Measurement<int>(obs->getName().c_str(),obs->getDescription().c_str()) {
    m_observable = obs->clone();
  }
  MeasPois::MeasPois(const MeasPois & other):Measurement<int>() {
    copy(other);
  }
  MeasPois::~MeasPois() {}

  //
  void MeasPois::copy(const MeasPois & other) {
    Measurement<int>::copy(other);
  }
  void MeasPois::setObservable(const OBS::ObservablePois * obs) {
    if (m_observable) delete m_observable;
    m_observable = (obs ? obs->clone():0);
  }
  const double MeasPois::getM(double s)    const { return 0;}
  const double MeasPois::getPdfM(double s) const { return 0;}
  const double MeasPois::getSignal()       const { return 0;}
  const double MeasPois::getSignalUnc()    const { return 0;}


  // protected
  void MeasPois::initObservable() {
    if (m_observable!=0) {
      std::cerr << "MeasPois::FATAL - m_observable non-zero ptr in initObservable()!!! BUG!" << std::endl;
      exit(-1);
    }
    m_observable = static_cast< OBS::BaseType<int> *>(OBS::makeObservable(PDF::DIST_POIS));
  }

  ///////////////////////////////////////////////////////////
  MeasPoisEB::MeasPoisEB() : MeasPois() {
    m_eff=0; m_bkg=0; m_effScale=1.0; m_bkgScale=1.0;
    updNuisanceIndex();
  }
  MeasPoisEB::MeasPoisEB(const char *name, const char *desc) : MeasPois(name,desc) {
    m_eff=0; m_bkg=0; m_effScale=1.0; m_bkgScale=1.0;
    updNuisanceIndex();
  }
  MeasPoisEB::MeasPoisEB(const MeasPoisEB & other):MeasPois() {
    copy(other);
  }
  MeasPoisEB::~MeasPoisEB() {}
  //
  void MeasPoisEB::copy(const MeasPoisEB & other) {
    if (this != &other) {
      MeasPois::copy(other);
      //      const OBS::BaseType<double> *eff, *bkg;
      const OBS::Base *eff, *bkg;
      m_eff=0;
      m_bkg=0;
      eff = other.getEff();
      if (eff) m_eff = OBS::clone(eff);
      bkg = other.getBkg();
      if (bkg) m_bkg = OBS::clone(bkg);
      m_effScale = other.getEffScale();
      m_bkgScale = other.getBkgScale();
    }
  }

  void MeasPoisEB::updNuisanceIndex() { // get's the indices of the bkg and eff in the nuisance list
    m_bkgIndex = getNuisanceIndex(m_bkg);
    m_effIndex = getNuisanceIndex(m_eff);
  }

  void MeasPoisEB::setEffScale( double scale ) {
    if (scale>0) m_effScale = scale;
  }

  void MeasPoisEB::setBkgScale( double scale ) {
    if (scale>0) m_bkgScale = scale;
  }

  // REMOVE!!!
//   void MeasPoisEB::setEffInt(double scale, int n) {
//     if (m_eff) {
//       m_eff->setIntNpts(n);
//       m_eff->setIntScale(scale);
//     }
//   }

//   void MeasPoisEB::setBkgInt(double scale, int n) {
//     if (m_bkg) {
//       m_bkg->setIntNpts(n);
//       m_bkg->setIntScale(scale);
//     }
//   }
//////////////
  void MeasPoisEB::setEffObs(double eff) {
    if (m_eff) {
      m_eff->setObservedValue(eff);
    }
  }

  void MeasPoisEB::setEffObs() {
    if (m_eff) {
      m_eff->setObservedValue();
    }
  }

  void MeasPoisEB::setBkgObs(double bkg) {
    if (m_bkg) {
      m_bkg->setObservedValue(bkg);
    }
  }

  void MeasPoisEB::setBkgObs() {
    if (m_bkg) {
      m_bkg->setObservedValue();
    }
  }

  void MeasPoisEB::setEffPdf(double eff, double sigma, PDF::DISTYPE dist) {
    if (m_eff!=0) {
      if (m_eff->getPdfDist()!=dist) {
        removeNuisance(m_eff);
        delete m_eff;
        m_eff=0;
      }
    }
    if (m_eff==0) 
      m_eff = static_cast<OBS::Base *>(makeNuisance(dist));
    m_eff->setPdfUseSigma(sigma);
    m_eff->setPdfUseMean(eff);
    m_eff->setName("efficiency");
    if (m_eff->getPdfDist()==PDF::DIST_POIS) {
      dynamic_cast<OBS::ObservablePois *>(m_eff)->setExcludeZero();
    }
  
    updNuisanceIndex();
  }

  void MeasPoisEB::setBkgPdf(double bkg, double sigma, PDF::DISTYPE dist) {
    if (m_bkg!=0) {
      if (m_bkg->getPdfDist()!=dist) {
        removeNuisance(m_bkg);
        delete m_bkg;
        m_bkg=0;
      }
    }
    if (m_bkg==0) m_bkg = static_cast< OBS::Base *>(makeNuisance(dist));
    m_bkg->setPdfUseSigma(sigma);
    m_bkg->setPdfUseMean(bkg);
    m_bkg->setName("background");
    updNuisanceIndex(); // this will set m_bkgIndex (and m_effIndex if needed)
  }

  void MeasPoisEB::setEffPdfMean(double m)  { if (m_eff) m_eff->setPdfUseMean(m); }
  void MeasPoisEB::setEffPdfSigma(double m) { if (m_eff) m_eff->setPdfUseSigma(m); }

  void MeasPoisEB::setBkgPdfMean(double m)  { if (m_bkg) m_bkg->setPdfUseMean(m); }
  void MeasPoisEB::setBkgPdfSigma(double m) { if (m_bkg) m_bkg->setPdfUseSigma(m); }

  void MeasPoisEB::setBEcorr(double c) {} // TODO: Need to implement
  //
  const double MeasPoisEB::getEffScale() const { return m_effScale; }
  const double MeasPoisEB::getBkgScale() const { return m_bkgScale; }
  const double MeasPoisEB::getBEcorr() const { return 0.0; } // TODO
  const double MeasPoisEB::getEffObs() const { return (m_eff ? m_eff->getObservedValue():0); }
  const double MeasPoisEB::getBkgObs() const { return (m_bkg ? m_bkg->getObservedValue():0); }

  //   const OBS::BaseType<double> *getEff() const {
  //     return m_eff;
  //   }
  const OBS::Base *MeasPoisEB::getEff() const {
    return m_eff;
  }
  const double MeasPoisEB::getEffPdfMean() const {
    return (m_eff ? m_eff->getPdfUseMean():0);
  }
  const double MeasPoisEB::getEffPdfSigma() const {
    return (m_eff ? m_eff->getPdfUseSigma():0);
  }
  const PDF::DISTYPE MeasPoisEB::getEffPdfDist() const {
    return (m_eff ? m_eff->getPdfDist():PDF::DIST_UNDEF);
  }
  const OBS::Base *MeasPoisEB::getBkg() const {
    return m_bkg;
  }
  const double MeasPoisEB::getBkgPdfMean() const {
    return (m_bkg ? m_bkg->getPdfUseMean():0);
  }
  const double MeasPoisEB::getBkgPdfSigma() const {
    return (m_bkg ? m_bkg->getPdfUseSigma():0);
  }
  const PDF::DISTYPE MeasPoisEB::getBkgPdfDist() const {
    return (m_bkg ? m_bkg->getPdfDist():PDF::DIST_UNDEF);
  }

  const double MeasPoisEB::getM(double s) const {
    double e,b;
    e = m_eff->getObservedValue()*m_effScale;
    b = m_bkg->getObservedValue()*m_bkgScale;
    return e*s + b;
  }

  const double MeasPoisEB::getM(double s, double eff, double bkg) const {
    return m_effScale*eff*s + m_bkgScale*bkg;
  }

  const double MeasPoisEB::getPdfM(double s) const {
    double e,b;
    e = m_eff->getPdfUseMean()*m_effScale;
    b = m_bkg->getPdfUseMean()*m_bkgScale;
    return e*s + b;
  }

  const double MeasPoisEB::getSignal() const {
    double e,b;
    e = m_eff->getObservedValue()*m_effScale;
    b = m_bkg->getObservedValue()*m_bkgScale;
    double dn = static_cast<OBS::Base *>(m_observable)->getObservedValue() - b;
    if (dn<0.0) dn=0.0;
    return (e>0 ? dn/e : 0);
  }

  // REMOVE!!
//   const double MeasPoisEB::calcProbRaw(int x, double s) const {
//     if ((m_eff==0) ||
//         (m_bkg==0) ||
//         (m_observable==0)) {
//       std::cerr << "ERROR: MeasPoisEB() - No eff and/or bkg defined!" << std::endl;
//       return 0.0;
//     }
//     ////// BUG TRAP!
//     if (m_observable->getPdf()==0) {
//       std::cerr << "ERROR: MeasPoisEB() - Observable OK, but with no PDF!" << std::endl;
//       return 0.0;
//     }
//     int ixeff, ixbkg;
//     double p=0;
//     double g;
//     PDF::BaseType<int> *pdf = static_cast<  PDF::BaseType<int> * >(m_observable->getPdf());
//     //////////////// TEMP CODE - FOR DEBUGGING, IN CASE OF BUGS...
//     if (pdf==0) {
//       std::cerr << "ERROR: wrong type of PDF in MeasPoisEB (expected BaseType<int>)!" << std::endl;
//       return 0;
//     }
//     if (m_nuisanceWeights.size() != m_nuisanceIndecis.size()) {
//       std::cerr << "ERROR: nuisance weight and index arrays are not of equal size!" << std::endl;
//       return 0.0;
//     }
//     if (m_nuisanceWeights.size()==0) {
//       std::cerr << "ERROR: nuisance weight and index arrays are not initialized (size zero)!" << std::endl;
//       return 0.0;
//     }
//     for (unsigned int i=0; i<m_nuisanceIndecis.size(); i++) {
//       ixeff = m_nuisanceIndecis[i][m_effIndex];
//       ixbkg = m_nuisanceIndecis[i][m_bkgIndex];
//       g = getM(s, m_eff->getIntX(ixeff), m_bkg->getIntX(ixbkg));
//       p += m_nuisanceWeights[i]*pdf->getVal(x,g);
//       if (x<0) { // TODO: Debug info - remove when obsolete
//         TOOLS::coutFixed(4,int(i));
//         TOOLS::coutFixed(" s(true), e, b, mu = ",2,s);
//         TOOLS::coutFixed(", ", 4, m_eff->getIntX(ixeff));
//         TOOLS::coutFixed(", ", 4, m_bkg->getIntX(ixbkg));
//         TOOLS::coutFixed(", ", 4, g);
//         TOOLS::coutFixed(", p = ", 4, p);
//         TOOLS::coutFixed(", w = ", 4, m_nuisanceWeights[i]);
//         TOOLS::coutFixed(", pdfval = ", 4, pdf->getVal(x,g));
//         std::cout << std::endl;
//       }
//     }

//     //    std::cout << "calcProb( " << x << ", " << s << " ) = " << p/m_nuisanceIntNorm << std::endl;
//     return p/m_nuisanceIntNorm;
//   }

//   const double MeasPoisEB::calcProb(int x, double s) const {
//     if ((m_effIndex<0) ||
//         (m_bkgIndex<0) ||
//         (m_eff==0) ||
//         (m_bkg==0) ||
//         (m_observable==0)) {
//       std::cerr << "ERROR: MeasPoisEB() - No eff and/or bkg defined!" << std::endl;
//       std::cerr << "       EffPtr = " << m_eff << std::endl;
//       std::cerr << "       BkgPtr = " << m_bkg << std::endl;
//       std::cerr << "       EffInd = " << m_effIndex << std::endl;
//       std::cerr << "       BkgInd = " << m_bkgIndex << std::endl;
//       std::cerr << "       Observ = " << m_observable << std::endl;

//       return 0.0;
//     }
//     ////// BUG TRAP!
//     if (m_observable->getPdf()==0) {
//       std::cerr << "ERROR: MeasPoisEB() - Observable OK, but with no PDF!" << std::endl;
//       return 0.0;
//     }
//     int ixeff, ixbkg;
//     double p=0;
//     double g;
//     PDF::BaseType<int> *pdf = static_cast<  PDF::BaseType<int> * >(m_observable->getPdf());
//     //////////////// TEMP CODE - FOR DEBUGGING, IN CASE OF BUGS...
//     if (pdf==0) {
//       std::cerr << "ERROR: wrong type of PDF in MeasPoisEB (expected BaseType<int>)!" << std::endl;
//       return 0;
//     }
//     if (m_nuisanceWeights.size() != m_nuisanceIndecis.size()) {
//       std::cerr << "ERROR: nuisance weight and index arrays are not of equal size!" << std::endl;
//       return 0.0;
//     }
//     if (m_nuisanceWeights.size()==0) {
//       std::cerr << "ERROR: nuisance weight and index arrays are not initialized (size zero)!" << std::endl;
//       return 0.0;
//     }
//     for (unsigned int i=0; i<m_nuisanceIndecis.size(); i++) {
//       ixeff = m_nuisanceIndecis[i][m_effIndex];
//       ixbkg = m_nuisanceIndecis[i][m_bkgIndex];
//       g = getM(s, m_eff->getIntX(ixeff), m_bkg->getIntX(ixbkg));
//       p += m_nuisanceWeights[i]*pdf->getVal(x,g);
//       if (x<0) { // TODO: Debug info - remove when obsolete
//         TOOLS::coutFixed(4,int(i));
//         TOOLS::coutFixed(" s(true), e, b, mu = ",2,s);
//         TOOLS::coutFixed(", ", 4, m_eff->getIntX(ixeff));
//         TOOLS::coutFixed(", ", 4, m_bkg->getIntX(ixbkg));
//         TOOLS::coutFixed(", ", 4, g);
//         TOOLS::coutFixed(", p = ", 4, p);
//         TOOLS::coutFixed(", w = ", 4, m_nuisanceWeights[i]);
//         TOOLS::coutFixed(", pdfval = ", 4, pdf->getVal(x,g));
//         std::cout << std::endl;
//       }
//     }

//     //    std::cout << "calcProb( " << x << ", " << s << " ) = " << p/m_nuisanceIntNorm << std::endl;
//     return p/m_nuisanceIntNorm;
//   }

};

#endif

#endif
