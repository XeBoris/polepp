#include <iostream>
namespace Combination {
  template<typename T> bool add(std::vector<T> & cnt, int elem, T vmax) {
    if (elem<0) return false;
    if (elem>int(cnt.size())-1) return false;
    cnt[elem]++;
    if (cnt[elem]>vmax) {
      cnt[elem] = 0;
      --elem;
      return add(cnt,elem,vmax);
    }
    return true;
  }

  template<typename T> bool add(std::vector<T> & cnt, int elem, const std::vector<T> & vmax) {
    if (elem<0) return false;
    if (elem>int(cnt.size())-1) return false;
    cnt[elem]++;
    if (cnt[elem]>vmax[elem]) {
      cnt[elem] = 0;
      --elem;
      return add(cnt,elem,vmax);
    }
    return true;
  }

  template<typename T> bool next_vector(std::vector<T> & vec, int vmax) {
    int elem = int(vec.size())-1;
    return add(vec,elem,vmax);
  }

  template<typename T> bool next_vector(std::vector<T> & vec, const std::vector<T> & vmax) {
    int elem = int(vec.size())-1;
    return add(vec,elem,vmax);
  }

  template<typename T> inline size_t makeIndexVector( int nelem, T imax, std::vector< std::vector<T> > & nvec) {
    //
    // Make a collection of vectors, each having <nelem> elements.
    // Each vector consists of indecis in the range [0..imax]
    //
    nvec.clear();
    std::vector<T> jj;
    jj.resize(nelem,0);
    nvec.push_back(jj);  
    while (Combination::next_vector(jj,imax)) {
      nvec.push_back(jj);
    }
    //
    // sort them
    //
    std::sort(nvec.begin(),nvec.end());
    return nvec.size();
  }

  template<typename T> inline int makeIndexVector( const std::vector<T> & imax, std::vector< std::vector<T> > & nvec) {
    //
    // Make a collection of vectors, each having <imax.size()> elements.
    // The element <i> of a given vector has index range given by [ 0..imax(i) ]
    //
    const unsigned int nelem = imax.size();
    nvec.clear();
    //
    std::vector<T> jj;
    jj.resize(nelem,0);
    nvec.push_back(jj);
    while (Combination::next_vector(jj,imax)) {
      nvec.push_back(jj);
    }
    //
    // sort them
    //
    std::sort(nvec.begin(),nvec.end());
    
    return nvec.size();
  }

  template<typename T> int getIndexVector(std::vector<T> & nvec, std::vector< std::vector<T> > & allVectors) {
    std::vector<T> nmax =  allVectors.back(); // vector containg the maximum index of all elements
    size_t nsize = allVectors.front().size(); // number of points
    size_t nFullSize = allVectors.size();     // number of vectors
    //
    if (nvec.size() != nsize) {
      std::cerr << "WARNING: Input vector of faulty size (" << nvec.size() << " <> " << nsize << ")\n";
      return -1;
    }
    //
    // Find index in array of vectors matching the given vector
    //
    T ofs=0;
    T npp=0;
    int nvecInd;
    for (unsigned int i=0; i<nsize; i++) {
      nvecInd = nsize-i-1;
      if (i==0) {
        npp=static_cast<T>(1);
      } else {
        npp *= nmax[nvecInd+1]+1;
      }
      if (nvec[nvecInd]>nmax[nvecInd]) {
        std::cout << "WARNING: Too large element in input vector (" << nvec[nvecInd] << " > " << nmax[nvecInd] << ")\n";
        std::cout << "         " << nvecInd << ",  nsize = " << nsize << ",  nmax = " << nmax[i] << std::endl;
        return -1;
      }
      ofs += npp*(nvec[nvecInd]);
    }
    if (ofs>=nFullSize) {
      std::cout << "ERROR: Offset too large - input vector not in range or...bug? Ofs = " << ofs << std::endl;
      return -1;
    }
    return ofs;
  }

};
